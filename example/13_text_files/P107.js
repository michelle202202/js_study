'use strict';

import fs from 'fs';

// 문제107) ‘Names.txt’ 파일을 열고 읽어서 데이터를 표시하라.

// ‘Names.txt’ 파일을 연다 (비동기 메서드 : open() 사용)
fs.open('Names.txt', 'r', (err, fd) => {
  if (err) throw err;
  console.log('Opened file "Names.txt".');
});

// 파일을 읽어서 데이터로 표시하라.(비동기 메서드 : readFile() 사용)
fs.readFile('Names.txt', 'utf-8', (err, data) => {
  if (err) {
    console.log(err);
  } else {
    console.log(data);
  }
});

// 비동기 메서드 : readFile()
// 동기 메서드 : readFileSync(), 반드시 두번째 인자를 "utf8"로 명시하여 인코딩 되도록 해줘야 함
// try {
//   const data = fs.readFileSync('Names.txt', 'utf-8');
//   console.log(data);
// } catch (err) {
//   console.log(err);
// }

//flag 값
// - 'r' - 읽기로 열기. 파일이 존재하지 않으면 에러발생.
// - 'r+' - 읽기/쓰기로 열기. 파일이 존재하지 않으면 에러발생.
// - 'w' - 쓰기로 열기. 파일이 존재하지 않으면 만들어지고, 파일이 존재하면 지우고 처음부터 씀.
// - 'w+' - 읽기/쓰기로 열기. 파일이 존재하지 않으면 만들어지고, 파일이 존재하면 처음부터 씀.
// - 'a' - 추가 쓰기로 열기. 파일이 존재하지 않으면 만들어짐.
// - 'a+' - 파일을 읽고/추가쓰기모드로 열기. 파일이 존재하지 않으면 만들어짐

// 'a': 추가할 파일을 엽니다. 파일이 없으면 생성됩니다.
// 'ax': ''와 비슷하지만 경로가 있으면 실패합니다.
// 'a+': 읽고 추가하기 위해 파일을 엽니다. 파일이 없으면 생성됩니다.
// 'ax+': 'a+'와 비슷하지만 경로가 있으면 실패합니다.
// 'as': 동기 모드에서 추가하기 위해 파일을 엽니다. 파일이 없으면 생성됩니다.
// 'as+': 동기 모드에서 읽고 추가하기 위해 파일을 엽니다. 파일이 없으면 생성됩니다.
// 'r': 읽기 위해 파일을 엽니다. 파일이 없으면 예외가 발생합니다.
// 'r+': 읽고 쓰기 위해 파일을 엽니다. 파일이 없으면 예외가 발생합니다.
// 'rs+': 동기 모드에서 읽고 쓰기 위해 파일을 엽니다. 운영 체제에 로컬 파일 시스템 캐시를 무시하도록 지시합니다.
// 이것은 잠재적으로 부실한 로컬 캐시를 건너뛸 수 있으므로 NFS 마운트에서 파일을 여는 데 주로 유용합니다.
// I/O 성능에 매우 실질적인 영향을 미치므로 필요한 경우가 아니면 이 플래그를 사용하지 않는 것이 좋습니다.
// 이것은 fs.open() 또는 fsPromises.open()을 동기 차단 호출로 바꾸지 않습니다. 동기 작업이 필요한 경우 fs.openSync()와 같은 것을 사용해야 합니다.
// 'w': 쓰기 위해 파일을 엽니다. 파일이 생성되거나(존재하지 않는 경우) 잘립니다(존재하는 경우).
// 'wx': 'w'와 비슷하지만 경로가 있으면 실패합니다.
// 'w+': 읽고 쓰기 위해 파일을 엽니다. 파일이 생성되거나(존재하지 않는 경우) 잘립니다(존재하는 경우).
// 'wx+': 'w+'와 비슷하지만 경로가 있으면 실패합니다.
